@page "/DisplayOrders"
@using Draft.Components.Models
@using Draft.Components.Layout
@using System.Text
@using Microsoft.Extensions.Primitives
@layout StaffLayout
<h3>Display Orders</h3>

<input type="text" @bind="searchTerm" placeholder="Search by phone number..."/>
<input type="datetime-local" @bind="startDate" placeholder="Start Date"/>
<input type="datetime-local" @bind="endDate" placeholder="End Date"/>
<button class="btn btn-primary" @onclick="FilterOrders">Filter Orders</button>
<button class="btn btn-primary" @onclick="ExportToPdf">Export to PDF</button>

<table class="table">
    <thead>
        <tr>
            <th>Customer Phone</th>
            <th>Coffee Name</th>
            <th>Addons</th>
            <th>Quantity</th>
            <th>Total Price</th>
            <th>Created At</th>
        </tr>
    </thead>

    <tbody>
    @foreach (var order in orders)
    {
    <tr>
        <td>@order.CustomerPhone</td>
        <td>@foreach (var item in order.OrderedItems)
            {
                @GetCoffeeName(item.CoffeeGuid);
                <br/>
            }</td>
        <td>@foreach (var item in order.OrderedItems)
                        {
                            @foreach (var ao in item.AddIns)
                            {
                            @GetCoffeeAddOnName(ao)
                            <br/>
                            }
                            <br/>
                        }</td>
        <td>@order.OrderedItems.Count</td>
        <td>@order.TotalPrice</td>
        <td>@order.CreatedAt</td>
    </tr>
        
    }
    </tbody>
</table>

@* <table class="table"> *@
@*     <thead> *@
@*         <tr> *@
@*             <th>Customer Phone</th> *@
@*             <th>Coffee Name</th> *@
@*             <th>Addons</th> *@
@*             <th>Quantity</th> *@
@*             <th>Total Price</th> *@
@*             <th>Created At</th> *@
@*         </tr> *@
@*     </thead> *@
@*     <tbody> *@
@*         @foreach (var order in orders) *@
@*         { *@
@*             <tr> *@
@*                 <td>@order.CustomerPhone</td> *@
@*                 <td>@GetCoffeeNames(order.OrderedItems)</td> *@
@*                 <td>@GetAddOnNames(order.OrderedItems)</td> *@
@*                 <td>@order.OrderedItems.Count</td> *@
@*                 <td>@order.TotalPrice</td> *@
@*                 <td>@order.CreatedAt</td> *@
@*             </tr> *@
@*         } *@
@*     </tbody> *@
@* </table> *@


@code{
    private string searchTerm = "";
    private DateTime startDate = DateTime.MinValue;
    private DateTime endDate = DateTime.MaxValue;
    private List<Order> orders = new List<Order>();
    private List<Coffees>? _coffeesList = new List<Coffees>();
    private List<CoffeeAddOns>? _addOnsList = new List<CoffeeAddOns>();

    private string GetCoffeeNames(List<OrderItem> orderedItems)
    {
        return string.Join(Environment.NewLine, orderedItems.Select(item => GetCoffeeName(item.CoffeeGuid)));
    }

    private string GetAddOnNames(List<OrderItem> orderedItems)
    {
        return string.Join(Environment.NewLine, orderedItems.SelectMany(item => item.AddIns.Select(ao => GetCoffeeAddOnName(ao))));
    }



    string? GetCoffeeName(Guid guid)
    {
        return _coffeesList.FirstOrDefault(c => c.Guid == guid)?.CoffeeName;
    }

    string? GetCoffeeAddOnName(Guid guid)
    {
        return _addOnsList.FirstOrDefault(c => c.Guid == guid)?.AddOnName;
    }

    async Task FilterOrders()
    {
        orders = orders
            .Where(o => string.IsNullOrEmpty(searchTerm) || o.CustomerPhone.Contains(searchTerm))
            .Where(o => o.CreatedAt >= startDate && o.CreatedAt <= endDate)
            .ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        var ordersFile = ConstantValues.OrdersPath;

        if (File.Exists(ordersFile))
        {
            try
            {
                string jsonFromFile = await File.ReadAllTextAsync(ordersFile);
                AllOrders? allOrders = JsonSerializer.Deserialize<AllOrders>(jsonFromFile);

                if (allOrders != null)
                {
                    orders = allOrders.OrdersList;
                }
            }
            catch (Exception e)
            {
                // Handle exceptions here, such as logging or displaying an error message
                Console.WriteLine($"An error occurred while reading the file: {e.Message}");
            }
        }

        var coffeeFile = ConstantValues.CoffeePath;
        var addOnsFile = ConstantValues.AddOnsPath;
        var customersFile = ConstantValues.CustomerPath;

        if (File.Exists(coffeeFile))
        {
            try
            {
                var jsonFromFile = await File.ReadAllTextAsync(coffeeFile);
                AllCoffees? allCoffees = JsonSerializer.Deserialize<AllCoffees>(jsonFromFile);

                if (allCoffees != null)
                {
                    _coffeesList = allCoffees.CoffeesList;
                }
            }
            catch (Exception e)
            {
                // Handle exceptions here, such as logging or displaying an error message
                Console.WriteLine($"An error occurred while reading the file: {e.Message}");
            }
        }

        if (File.Exists(addOnsFile))
        {
            try
            {
                string jsonFromFile = await File.ReadAllTextAsync(addOnsFile);
                AllListOfCoffeeAddOns? allAddOns = JsonSerializer.Deserialize<AllListOfCoffeeAddOns>(jsonFromFile);

                if (allAddOns != null)
                {
                    _addOnsList = allAddOns.AddOnsList;
                }
            }
            catch (Exception e)
            {
                // Handle exceptions here, such as logging or displaying an error message
                Console.WriteLine($"An error occurred while reading the file: {e.Message}");
            }
        }
    }

    private void ExportToPdf()
    {
        License.LicenseKey = "IRONSUITE.FOYOJ78626.REGAPTS.COM.5434-F87BE82E00-AT2YFL4MBGGW6I-5RFPR5LN6PN2-OM3S2UPD2AVV-WA22V3X2555R-NVAFENZYHBJT-OZRJKBNPL63A-BITFGM-TWNT2VFMAOKLUA-DEPLOYMENT.TRIAL-Q47FAA.TRIAL.EXPIRES.09.FEB.2024";

        // var htmlContent = new StringBuilder();
        // htmlContent.Append("<table class=\"table\">");
        // htmlContent.Append("    <thead>");
        // htmlContent.Append("    <tr>");
        // htmlContent.Append("        <th>Customer Phone</th>");
        // htmlContent.Append("        <th>Coffee Name</th>");
        // htmlContent.Append("        <th>Addons</th>");
        // htmlContent.Append("        <th>Quantity</th>");
        // htmlContent.Append("        <th>Total Price</th>");
        // htmlContent.Append("        <th>Created At</th>");
        // htmlContent.Append("    </tr>");
        // htmlContent.Append("    </thead>");
        // htmlContent.Append("");
        // htmlContent.Append("    <tbody>");
        // foreach (var order in orders)
        //     {
        //         htmlContent.Append("<tr>");
        //         htmlContent.Append("    <td>");
        //         htmlContent.Append(@order.CustomerPhone);
        //     htmlContent.Append("</td>");
        //         htmlContent.Append("    <td>");
        //                 foreach (var item in order.OrderedItems)
        //                 {
        //                     htmlContent.Append(GetCoffeeName(item.CoffeeGuid));
        //                     htmlContent.Append("<br/>");
        //                 }
        //             htmlContent.Append("</td>");
        //             htmlContent.Append("<td>");
        //                 foreach (var item in order.OrderedItems)
        //                 {
        //                     foreach (var ao in item.AddIns)
        //                     {
        //                         htmlContent.Append(GetCoffeeAddOnName(ao));
        //                         htmlContent.Append("<br/>");
        //                     }
        //
        //                     htmlContent.Append("<br/>");
        //                 }
        //             htmlContent.Append("</td>");
        //             htmlContent.Append("<td>");
        //             htmlContent.Append(order.OrderedItems.Count);
        //             htmlContent.Append("</td>");
        //             htmlContent.Append("<td>");
        //             htmlContent.Append(order.TotalPrice);
        //             htmlContent.Append("</td>");
        //             htmlContent.Append("<td>");
        //             htmlContent.Append(order.CreatedAt);
        //             htmlContent.Append("</td>");
        //             htmlContent.Append("</tr>");
        //
        //     }
        // htmlContent.Append("    </tbody>");
        // htmlContent.Append("</table>");
        
        var htmlContent = new StringBuilder();

        htmlContent.Append("<!DOCTYPE html>");
        htmlContent.Append("<html>");
        htmlContent.Append("<head>");
        // htmlContent.Append("<link herf="">");
        htmlContent.Append("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">");
        htmlContent.Append("<title>Table Page</title>");
// You can include other head elements here, like CSS or JavaScript references.
        htmlContent.Append("</head>");
        htmlContent.Append("<body>");
        htmlContent.Append("<table class=\"table\">");
        htmlContent.Append("    <thead>");
        htmlContent.Append("        <tr>");
        htmlContent.Append("            <th>Customer Phone</th>");
        htmlContent.Append("            <th>Coffee Name</th>");
        htmlContent.Append("            <th>Addons</th>");
        htmlContent.Append("            <th>Quantity</th>");
        htmlContent.Append("            <th>Total Price</th>");
        htmlContent.Append("            <th>Created At</th>");
        htmlContent.Append("        </tr>");
        htmlContent.Append("    </thead>");
        htmlContent.Append("    <tbody>");
        foreach (var order in orders)
        {
            htmlContent.Append("    <tr>");
            htmlContent.AppendFormat("        <td>{0}</td>", order.CustomerPhone);
            htmlContent.Append("        <td>");
            foreach (var item in order.OrderedItems)
            {
                htmlContent.AppendFormat("{0}<br/>", GetCoffeeName(item.CoffeeGuid));
            }
            htmlContent.Append("        </td>");
            htmlContent.Append("        <td>");
            foreach (var item in order.OrderedItems)
            {
                foreach (var addon in item.AddIns)
                {
                    htmlContent.AppendFormat("{0}<br/>", GetCoffeeAddOnName(addon));
                }
                htmlContent.Append("<br/>");
            }
            htmlContent.Append("        </td>");
            htmlContent.AppendFormat("        <td>{0}</td>", order.OrderedItems.Count);
            htmlContent.AppendFormat("        <td>{0}</td>", order.TotalPrice);
            htmlContent.AppendFormat("        <td>{0}</td>", order.CreatedAt);
            htmlContent.Append("    </tr>");
        }
        htmlContent.Append("    </tbody>");
        htmlContent.Append("</table>");
        htmlContent.Append("</body>");
        htmlContent.Append("</html>");



        var renderer = new HtmlToPdf();
        var result = renderer.RenderHtmlAsPdf(htmlContent.ToString());

        // Get the current date and time
        var now = DateTime.Now;

        // Format the date and time as a string
        // .Replace(':', '_')
        var dateTimeString = now.ToString("yyyy-MM-dd-HH-mm-ss").Replace(':', '_');

        // Specify the directory where you want to save the PDF
        var directory = ConstantValues.PdfsPath;

        if (!Directory.Exists(directory))
        {
            Directory.CreateDirectory(directory);
        }

        // Create the full path to the PDF file
        var fileName = Path.Combine(directory, $"FilteredOrders_{dateTimeString}.pdf");

        // Save the PDF to the specified file
        result.SaveAs(fileName);
    }

}